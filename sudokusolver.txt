#include <iostream>
using namespace std;

const int N = 9;

// Function to print the Sudoku board
void print(int board[N][N], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to check if placing num at board[i][j] is valid
bool isValid(int board[N][N], int i, int j, int num) {
    // Check row and column
    for (int k = 0; k < N; k++) {
        if (board[i][k] == num || board[k][j] == num)
            return false;
    }

    // Check 3x3 subgrid
    int startRow = (i / 3) * 3;
    int startCol = (j / 3) * 3;
    for (int r = startRow; r < startRow + 3; r++) {
        for (int c = startCol; c < startCol + 3; c++) {
            if (board[r][c] == num)
                return false;
        }
    }
    return true;
}

// Recursive Sudoku solver
bool sudokuSolver(int board[N][N], int i, int j, int n) {
    if (i == n) {
        print(board, n);
        return true;
    }

    if (j == n) {
        return sudokuSolver(board, i + 1, 0, n);
    }

    if (board[i][j] != 0) {
        return sudokuSolver(board, i, j + 1, n);
    }

    for (int num = 1; num <= 9; num++) {
        if (isValid(board, i, j, num)) {
            board[i][j] = num;
            bool subAns = sudokuSolver(board, i, j + 1, n);
            if (subAns) {
                return true;
            }
            board[i][j] = 0;
        }
    }

    return false;
}

int main() {
    int n = 9;
    int board[9][9] = {
        {0, 0, 7, 1, 0, 0, 0, 6, 0},
        {1, 0, 5, 2, 0, 8, 0, 0, 0},
        {6, 0, 0, 0, 0, 7, 1, 2, 0},
        {3, 1, 2, 4, 0, 5, 0, 0, 0},
        {0, 0, 6, 0, 9, 0, 2, 0, 0},
        {0, 0, 0, 6, 0, 0, 4, 3, 5},
        {0, 0, 1, 0, 0, 4, 9, 8, 6},
        {8, 0, 3, 9, 0, 6, 0, 0, 0},
        {0, 6, 0, 0, 8, 2, 7, 0, 3}
    };

    if (!sudokuSolver(board, 0, 0, n)) {
        cout << "No solution exists!" << endl;
    }

    return 0;
}
